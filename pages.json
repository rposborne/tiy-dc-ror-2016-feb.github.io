[{"path":{"id":"118","title":"The Ruby On Rails Way","description":"\nIn the following order ruby, oo, db, api, html css, rails, and of course victory. "}},{"unit":{"id":"454","title":"Preflight","description":"\nStarting your path as a developer!"}},{"lesson":{"id":"1258","title":"Welcome","description":"\nIt's time to learn!","body":"## Welcome\r\n\r\nI hope you all are as excited as I am about getting this class started. It is in the best interest of everyone to make sure you as prepared as possible for the coming twelve weeks. Through large amounts of hard work and determination, you will learn, grow, and achieve.\r\n\r\nRemember, we are all in this together. We will have individual assignments and group assignments. Always be willing and ready to help your peers.\r\n\r\nThank you for your commitment and hard work. It will be rewarded.\r\n\r\nThere are quite a few tasks and topics that are necessary to take care of before we can actually start learning how to be Ruby and Rails developers. Rather than using class time to get through these, I expect that you can accomplish and learn these things without assistance so that we can spend class time only on those things that are difficult to learn on your own. If you have any questions or confusion about these tasks, please email me so I can help you work through them.\r\n\r\n## Objectives\r\n\r\nThe following are the learning objectives for this prework, all of which are important requirements expected of a professional developer. Though they are not technically \"programming\" skills, they are crucially important to success both during the class and on the job.\r\n\r\n1. Be able to communicate technical accomplishments and struggles in writing.\r\n2. Be able to learn in contexts that aren't necessarily suited to your primary learning style.\r\n3. Adapt to the workflows used by professional developers (using the command line in particular)\r\n4. Describe the importance of mindset on learning and be able to analyze one's own type of mindset.\r\n"},"unit_id":"454"},{"lesson":{"id":"1256","title":"Honesty","description":"\nHonesty is more than not lying.","body":"<!---\r\n---\r\ntitle: Honesty\r\nlayout: default\r\n---\r\n-->\r\n\r\n\r\n>\"Honesty is more than not lying. It is truth telling, truth speaking, truth living, and truth loving.\"\r\n>-James E. Faust\r\n\r\n## Honesty Policy\r\n\r\n* __Honest with your feedback__\r\n* __Honest with your homework__\r\n* __Honest with your understanding__\r\n* __Honest with your feelings__\r\n* __Honest with your peers__\r\n* __Honest with yourself__\r\n\r\nI cannot stress enough the importance of honesty and open communication.\r\n\r\nFor the sake of Clarity, we'll define Honesty as:\r\n\r\n>Honesty - sincere, blameless, fairly earned, simple, unpretentious, and free of deceit."},"unit_id":"454"},{"lesson":{"id":"1257","title":"Homework","description":"\nPolicies, and Expectations","body":"<!---\r\n---\r\ntitle: Homework\r\nlayout: default\r\n---\r\n-->\r\n\r\n\r\n## Homework "},"unit_id":"454"," Assignments\r\n\r\n* All assignments are due at 8am before class begins (unless otherwise noted)\r\n* No assignments should include **copy and pasted** code\r\n* No assignments should include code lifted or `borrowed` from someone else without proper citation and licensing\r\n* Incomplete homework is better than late homework\r\n* Late homework is better than no homework\r\n* Asking for clarify or help on assignments is encouraged\r\n* Turning in code that you do not understand is **highly** discouraged and should be noted so we can address those issues. We, as developers, need to be able to explain our code to others and we cannot do that if we do not understand it ourselves.\r\n\r\n### In-lecture Exercises\r\n\r\nDuring breaks in the lecture during the first half of the course, you will be given exercises for practicing the content you've just learned.  Sometimes I'll give you a set of tests, and you'll be asked to write code to make them pass.  Other times you'll be given a blank slate to start from.  In most cases, you won't have time to finish the exercises before I ask you to stop and throw away what you've done.  This is normal (if not disconcerting) and will be somewhat liberating a few weeks in.\r\n\r\n### In-lecture Challenges\r\n\r\nDuring the second half of the course, we'll have reached a point where the knowledge we accumulated in the first few weeks risks being crowded out by new content.  In order to combat this (and to actively prepare for interview questions), lecture will include challenges that cover fundamental Ruby topics.  You will have approximately 20 minutes to work on each of these challenges, and you'll do so individually.\r\n\r\n### Nightly Assignments\r\n\r\nAfter classes on Mondays, Tuesdays, and Wednesdays, you'll be given an assignment.  You'll work on these during the lab time that afternoon, and it's expected that you won't finish them by 5pm.  You'll be asked to work on these as individuals, and you'll usually be expected to write tests first.\r\n\r\n### Weekend Assignments\r\n\r\nAfter classes on Thursdays, you'll be given a substantially longer assignment.  You'll usually work on these assignments in pairs (which we'll assign for you), and you'll occasionally be working with students from other courses.  Lab time on Thursday afternoon and all day Friday will be dedicated to helping you with these.  As above, we expect that you won't finish these by 5pm on Friday, and you'll be expected to write tests first.\r\n\r\n### Final Project\r\n\r\nDuring the last three weeks of the course, you will be working on your capstone project, putting all you've learned into practice. You will be working with a group of 2-5 people on your project, and these groups CAN include students from the other courses. Projects that span multiple courses typically turn out the best.\r\n\r\nDuring weeks 10, 11, and 12, you'll spend all of your time working on this project (minus some field trips and guest speakers). We will potentially have occasional lecture time, but it will be tailored to what you need to know for your project and will be optional.\r\n\r\nThis project must use Rails in some fashion, although it will inevitably involve additional technologies. If you are not planning to spend much time on the visual user interface, I _highly_ suggest working with someone from another class to make your project visually appealing.\r\n":null},{"assignment":{"id":"689","title":"Accounts","due_date":"2016-02-29","description":"\nSign up for a GitHub, Heroku and Stackoverflow Accounts\r\n","body":"## GitHub\r\nGitHub is a web-based hosting and communication service for software development projects that uses the Git revision control system.\r\n\r\n1. Sign up for a GitHub account at <https://github.com/>\r\n2. Make sure to add a profile picture and your full name, since this will help me learn your name.\r\n3. Complete <https://try.github.io/>\r\n4. Enter your GitHub account in the Notes box below and submit away!\r\n\r\n## Stackoverflow\r\nSignup up over at [Stackoverflow](http://stackoverflow.com/)\r\n\r\n## Heroku \r\nSignup up over at [Heroku](https://signup.heroku.com/identity)"},"unit_id":"454"},{"lesson":{"id":"1259","title":"Communication","description":"\n Don't stare into the Abyss","body":"<!---\r\n---\r\ntitle: Communication\r\nlayout: default\r\n---\r\n-->\r\n\r\n## Communication Policy\r\n\r\n* Asking for help is always encouraged\r\n* More is better than less\r\n* A peer is better than a google search\r\n* A google search is better than staring into the abyss†\r\n* Stargazing is better than giving up\r\n* “I don’t understand” is a valid question to ask\r\n* Sharing is good, but always include a source. Do not spread misinformation\r\n* Slack is your friend, use them to communicate with your class\r\n* Be open and [honest](honesty.html) when you are struggling, feeling behind, or overwhelmed\r\n\r\n† Don't stare into the [Abyss](http://blog.8thlight.com/justin-herrick/2012/09/18/adapting-to-change.html)\r\n"},"unit_id":"454"},{"lesson":{"id":"1260","title":"Code of Conduct","description":"\nBe welcoming, friendly, and patient.","body":"<!---\r\n---\r\ntitle: Code of Conduct\r\nlayout: default\r\n---\r\n-->\r\n\r\n\r\n## Code of Conduct\r\n\r\nLike the technical community as a whole, classes at The Iron Yard are made up of a mixture of people from all different backgrounds.\r\n\r\nDiversity is one of our huge strengths, but it can also lead to communication issues and unhappiness. To that end, we have a few ground rules that we ask people to adhere to when they're taking a class at The Iron Yard. These rules apply equally to teachers, students, other staff, and guest lecturers.\r\n\r\nThis isn't an exhaustive list of things that you can't do. Rather, take it in the spirit in which it's intended - a guide to make it easier to enrich all of us, the technical communities in which we participate.\r\n\r\nThis code of conduct applies to all communication: this includes in class, Slack, email, and other forums such as Skype, Google  Hangouts, etc.\r\n\r\nIf you believe someone is violating the code of conduct, we ask that you report it by talking to your teacher. If you do not feel comfortable talking to your teacher, speak with any Iron Yard teacher or campus director.\r\n\r\n*   **Be welcoming, friendly, and patient.**\r\n\r\n*   **Be considerate.** Your work will be used by other people, and you in turn will depend on the work of others. Any decision you take will affect your colleagues, and you should take those consequences into account when making decisions.\r\n\r\n*   **Be respectful.** Not all of us will agree all the time, but disagreement is no excuse for poor behavior and poor manners. We might all experience some frustration now and then, but we cannot allow that frustration to turn into a personal attack. It's important to remember that a community where people feel uncomfortable or threatened is not a productive one. Members of the Iron Yard community should be respectful when dealing with other members as well as with people outside the Iron Yard community.\r\n\r\n*   **Be careful in the words that you choose.** Be kind to others. Do not insult or put down other people. Behave professionally. Remember that harassment and sexist, racist, or exclusionary behavior are not appropriate for this class. This includes, but is not limited to:\r\n\r\n    *   Violent threats or language directed against another person.\r\n    *   Sexist, racist, or otherwise discriminatory jokes and language.\r\n    *   Posting sexually explicit or violent material.\r\n    *   Personal insults, especially those using racist or sexist terms.\r\n    *   Unwelcome sexual attention.\r\n    *   Advocating for, or encouraging, any of the above behavior.\r\n    *   Repeated harassment of others. In general, if someone asks you to stop, then **stop**.\r\n\r\n*   **When we disagree, we try to understand why.** Disagreements, both social and technical, happen all the time and The Iron Yard is no exception. It is important that we resolve disagreements and differing views constructively. Remember that we're different. The strength of The Iron Yard comes from its varied members, people from a wide range of backgrounds. Different people have different perspectives on issues. Being unable to understand why someone holds a viewpoint doesn't mean that they're wrong. Don't forget that it is human to err and blaming each other doesn't get us anywhere, rather offer to help resolving issues and to help learn from mistakes.\r\n\r\n_This text is taken from [the Django project](https://www.djangoproject.com/conduct/)._\r\n"},"unit_id":"454"},{"assignment":{"id":"690","title":"Mindset","due_date":"","description":"\nStarting your mental journey.","body":"#### If you have already completed this on the class website, please submit a note stating you did so. \r\n\r\n## Questions\r\n\r\n1. Read [Fixed vs. Growth: The Two Basic Mindsets That Shape Our Lives](http://www.brainpickings.org/2014/01/29/carol-dweck-mindset/)\r\n2. Read [What is Code](http://www.bloomberg.com/graphics/2015-paul-ford-what-is-code/)\r\n3. Read / Listen [Visual/auditory/tactile/etc learning styles](http://www.npr.org/blogs/health/2011/08/29/139973743/think-youre-an-auditory-or-visual-learner-scientists-say-its-unlikely)\r\n\r\n## Answer these questions\r\n1. Did you upload a picture to your GitHub account to help me learn faces?\r\n1. What aspects of the Growth and Fixed mindset can you identify in your personal history? In what areas do you feel Fixed? Where do you see the most Growth?\r\n1. The third article was short, and was about recent research in learning styles. What is your gut reaction about the findings and about their plausibility? Would you have said that you were a visual, an auditory, or a tactile learner?\r\n1. What difficulties do you predict that you will encounter during our course? How have you reacted to similar situations in the past? How do you plan on reacting to these situations during the class?\r\n1. What excited and surprised you in What is Code? Was the description of programming (both the activity and the culture) what you expected? How did it differ?\r\n"},"unit_id":"454"},{"lesson":{"id":"1261","title":"Educate","description":"\nRuby!","body":"If you haven't completed it already, [Codecademy](http://www.codecademy.com) has a Ruby course that you should walk through to familiarize yourself with the concepts.\r\n\r\n[http://www.codecademy.com/en/tracks/ruby](http://www.codecademy.com/en/tracks/ruby)\r\n\r\n## HTML/CSS\r\n\r\nHTML/CSS will be covered in the course, but not to the same depth as Ruby and Rails, so it would benefit you extremely to be familiar with building websites.\r\n\r\n[http://www.codecademy.com/en/tracks/web](http://www.codecademy.com/en/tracks/web)\r\n\r\n## The Command Line\r\n\r\nThe command line is an interface to the internals of your computer, as opposed to the graphical user interface (GUI) that we commonly use. We will be using the command line _extensively_ in our class, but the point of this prework is not to be an expert, just to start to get comfortable.\r\n\r\nEspecially if you've never used the command line before, you may want to go through these more than once. Make sure not just to read/watch, but really dive in and use the commands that you learn about.\r\n\r\nRead and practice the following:\r\n\r\n1. [Command Line](http://skillcrush.com/2012/12/03/command-line-2/) at SkillCrush\r\n2. [Command Line Basics](http://blog.teamtreehouse.com/command-line-basics) at Treehouse\r\n\r\n### Supplemental\r\n\r\nFurther reading and practice:\r\n\r\n1. [The Command Line Crash Course](http://cli.learncodethehardway.org/book/)\r\n2. [A Command Line Primer for Beginners](http://lifehacker.com/5633909/who-needs-a-mouse-learn-to-use-the-command-li…)\r\n\r\n## Git\r\n\r\n> Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.\r\n\r\nIt is a command line tool that we will be using for every project we do in class. Again, the objective is not to become an expert before the class, but just to start to get comfortable.\r\n\r\n### Supplemental\r\n\r\nIf you want to spend some more time with git, [Git Immersion](http://gitimmersion.com/) is a great resource.\r\n\r\n## GitHub\r\n\r\nGitHub is a web-based hosting and communication service for software development projects that uses the Git revision control system.\r\n\r\n1. Sign up for a [Github](https://github.com/) account, if you don't have one already.\r\n2. Make sure to add a profile picture and your full name, since this will help me learn your name. The _username_ you choose does not need to reflect your real name"},"unit_id":"454"," if you have a handle you already use (for Twitter, IM, IRC, etc.) feel free to use that.\r\n3. Email ":{"me":{"(mailto:{{ site.instructor_email }}) the username you choose so that I can get you added to the group we'll be using for class.\r\n4. Complete ":{"try.github.io":{"(https://try.github.io/).\r\n\r\n### Supplemental\r\n\r\nCheck out the ":{"GitHub Guides":{"(https://guides.github.com/) if you want to learn more about using GitHub prior to class.\r\n":null}}}}}}},{"lesson":{"id":"1262","title":"Computer","description":"\nGetting one, and getting it set up","body":"# Computer Setup\r\n\r\n## Hardware\r\n\r\nAll students must bring their own MacBook laptop. Your MacBook should have a\r\nminimum of 4 GB of RAM and 128 GB of hard drive space. Those are minimum specs,\r\nbut I REALLY recommend getting 8 GB of RAM.\r\n\r\nHere are the current\r\n[MacBook Air models](http://www.apple.com/macbook-air/specs.html) and\r\n[MacBook Pro models](http://www.apple.com/macbook-pro/specs-retina/).\r\n\r\nYour MacBook MUST be running OS X El Capitan. Both are free\r\nupgrades from the App Store.\r\n\r\nDo not go with the new, skinny 12\" Retina MacBooks.  Their processor will be too\r\nsluggish in a year or two.\r\n\r\nThere is no commercial software required for the class.\r\n\r\n## Software\r\n\r\n### OSX El Capitan\r\n\r\nYou'll need to install OS X El Capitan if your Mac didn't have it pre-installed or you haven't upgraded already.\r\n\r\n1.  Download the El Capitan upgrade from the Apple Store: [download here](https://itunes.apple.com/us/app/os-x-el-capitan/id1018109117?mt=12).\r\n2.  You'll need to sign in to your Mac's 'App Store' with your [Apple ID](https://appleid.apple.com/).\r\n3.  Double-click \"Install OS X El Capitan\" to begin installation.\r\n*WARNING*: The OS X upgrade can take a bit of time to complete and will require a restart. Plan on doing this in the evening or over a lunch break.\r\n\r\n### Additional Software\r\n\r\nAs soon as possible after receiving your Mac, run through the following steps.\r\nIf you've done a lot of your own configuration, some of these steps may have to\r\nchange.  If you run into ANY PROBLEMS, send me an e-mail at: [{{site.instructor_email}}](mailto:{{ site.instructor_email }})\r\n\r\n* Install Atom\r\n  * Download Atom from [the Atom website](https://atom.io/).\r\n  * Install and run it.  If you're not familiar with Mac installations, [read more here](mac_installations.html).\r\n  * Click on the \"Atom\" option in your menu bar (all the way in the upper-left of your screen) and choose \"Install Shell Commands.\"\r\n\r\n** Atom is not the best editor, but it has great defaults, if you are already using an editor stick with it, alternatives, are Sublime Text, Textmate, and MacVim **\r\n\r\n* Install Google Chrome\r\n  * Download Chrome from [the Chrome download page](https://www.google.com/intl/en/chrome/browser/).\r\n  * Install and run it.  This install will work a little differently from Atom, so if you get confused, [read more here](mac_installations.html).\r\n\r\n* Install XCode Command Line Tools\r\n  * Open up Terminal.  If you're not familiar with opening applications on your Mac, [read this page, especially the last section](mac_installations.html).\r\n  * Go to the [Apple Developer Downloads site](https://developer.apple.com/downloads/).\r\n  * `xcode-select --install`\r\n\r\n* Install Homebrew\r\n  * Open up Terminal (or if you've still got it open, keep using it).\r\n  * Run ```ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"```\r\n  * Run `brew doctor`\r\n\r\n* Install rbenv "},"unit_id":"454"," ruby-build\r\n  * Open up Terminal (or if you've still got it open, keep using it).\r\n  * `brew install ruby-build rbenv`\r\n  * `echo 'if which rbenv > /dev/null":null," then eval \"$(rbenv init -)\"":null," fi' >> ~/.bash_profile`\r\n\r\n* Install ruby 2.3.0\r\n  * Close and reopen Terminal.\r\n  * `rbenv install 2.3.0`\r\n  * Go and get some coffee. That last one will take a while.\r\n  * `rbenv global 2.3.0`\r\n  * Close and reopen Terminal.\r\n  * `gem install pry`\r\n  * Run `which ruby`. If you see a path starting with `/usr/bin/`, get a TA or instructor to help you.\r\n\r\n<!-- * Install nodejs\r\n  * In Terminal\r\n  * `brew install nodejs` -->\r\n\r\n* Install git\r\n  * In Terminal\r\n  * `brew install git`\r\n  * `git config --global push.default simple`\r\n  * `git config --global credential.helper osxkeychain`\r\n\r\n* Install Heroku Toolbelt\r\n  * Download the Toolbelt from ":{"this page":{"(https://toolbelt.heroku.com/).\r\n  * Run it and follow the install steps.\r\n  * Open Terminal and run `heroku login`.  Enter your Heroku credentials when asked.\r\n\r\n<!-- * Create an SSH key (__do not__ give it a password when it asks for one)\r\n  * `ssh-keygen`\r\n  * Press enter at the first prompt to stick with the default file name.\r\n  * Press enter at the second prompt to give it no password. -->\r\n\r\n* Add the following applications to your Dock\r\n  * Atom\r\n  * Chrome\r\n  * Terminal\r\n":null}}},{"assignment":{"id":"691","title":"Preflight Education Understanding","due_date":"","description":"\nAnswer some questions!","body":"#### If you have already completed this on the class website, please submit a note stating you did so. \r\n\r\n\r\n## Questions\r\n  * What is program Control Flow? How many shapes can it take?\r\n  * What are the differences (in Ruby) between an Array and a Hash?\r\n  * Go to http://gist.github.com. Create a new gist which contains Ruby code. This code should: (a) use at least one variable"},"unit_id":"454"," (b) use at least one loop":null," (c) use at least one method written by you. Paste the link to this gist in as the answer to this question, then describe what your code does in English.\r\n  * Copy this Ruby code out to a file on your file system. Save it, run it to make sure that it works, and commit it to a new git repository. Push that repository up to GitHub and paste a link to your GitHub repository here.\r\n  * Write a set of command line commands which accomplish the following (in this order): (a) change directory to your home directory":null," (b) look at the contents of your home directory":null," (c) make a new directory called \"iron_yard\" inside your home directory":null," (d) copy the file called \".bash_profile\" into the new \"iron_yard\" directory":null," (e) change into that directory":null," (f) remove the copy of the \".bash_profile\" file within \"iron_yard\".\r\n  * When can merge conflicts occur in git?\r\n  * Write a CSS selector to find all <span> HTML elements with a class of \"important\" which happen to be inside of any \\<h3> elements.\r\n  * Which part of the prework did you like the MOST?\r\n  * Which part of the prework did you like the LEAST?":null},{"unit":{"id":"407","title":"Ruby","description":"\nIt's the first week"}},{"lesson":{"id":"1255","title":"Control Flow and Variables","description":"\nGeneral Orientation into Ruby","body":"* Class Logistics\r\n  * Daily schedule\r\n  * Exercises, Assignments, and Projects\r\n  * Readings\r\n  * Pair-question-asking\r\n* Human Learning\r\n  * Definition: Acquiring knowledge and skills and having them readily available from memory so you can make sense of future problems and opportunities.\r\n  * Three concentric circles\r\n  * ON BOARD: To learn, you should... Get related knowledge in advance\r\n  * ON BOARD: Expect to exert effort\r\n  * ON BOARD: Interleave topics\r\n* Programming Languages\r\n  * What are they?\r\n  * How many are there?\r\n  * What makes Ruby special?\r\n  * MINASWAN\r\n  * Why Ruby is not the same thing as Ruby on Rails\r\n* Terminal\r\n  * Mac file system\r\n  * `pwd`\r\n  * `ls`\r\n  * `cd`\r\n  * `/` and `~`\r\n* Instructions - PB "},"unit_id":"407"," J\r\n* Control Flow\r\n  * PB ":null," J for the entire class.  Use a `while`, maybe an `if`.\r\n  * `if`, `else`, `elsif`, `end`\r\n  * `while` loop\r\n* Indentation\r\n* Variables\r\n  * PB ":null," J for the entire class, everyone wants a different jelly.\r\n  * EXAMPLE: Write and execute Ruby code which asks the user for a word and tells the user whether the word is a palindrome.  Let it ask for a total of five words.\r\n* Logical Statements\r\n  * Concepts of `and` and `or`\r\n  * While someone still wants a sandwich\r\n  * While someone still wants a sandwich AND I still have bread\r\n  * If `selection ":"= \"Strawberry\"` OR `selection == \"Raspberry\"`\r\n  * EXAMPLE: I want to edit a comment on a forum.  I can do that if I'm logged in and it's my comment or if I'm an admin.\r\n  * `==` vs `=`\r\n  * `!`\r\n* Data Types\r\n  * Strings\r\n  * Integers\r\n  * Floats\r\n  * Problem!: `1/3`, `2/3`\r\n  * Type conversions (`to_i`, `to_f`, etc)\r\n* Palindrome Problem\r\n  * Ask for 5 words.  Check to see if each is a palindrome.\r\n* Print/Get\r\n  * `puts`\r\n  * `gets`\r\n  * `gets.chomp`\r\n* Running Ruby\r\n  * From the command line\r\n  * From irb\r\n\r\n#### Lecture Notes\r\n\r\n* [Class Video](https://youtu.be/ydB2Ulxu-kw)\r\n* [Whiteboard - Learning Zone](http://tiyd-rails.s3.amazonaws.com/pictures/uploaded_files/000/000/020/original/learning_zones.jpg?1442257338)\r\n* [Whiteboard - Folders](http://tiyd-rails.s3.amazonaws.com/pictures/uploaded_files/000/000/021/original/mac_dir_structure.jpg?1442257384)\r\n* [PB","J Pseudocode from Class":{"(pbj.txt)\r\n* ":{"Palindrome code from Class":{"(palindrome.rb)\r\n\r\n#### Useful Links\r\n\r\n* ":{"Programming Language Family Tree":{"(https://ccrma.stanford.edu/courses/250a-fall-2005/docs/ComputerLanguagesChart.png)\r\n* ":{"Whitespace Language":{"(http://en.wikipedia.org/wiki/Whitespace_%28programming_language%29#Sample_code)\r\n* ":{"Hodor-lang":{"(http://www.hodor-lang.org/)\r\n* ":{"Why Dates Get Weird":{"(https://gist.github.com/pixeltrix/e2298822dd89d854444b)\r\n\r\n#### Evening Reading\r\n\r\n* Preview Reading: ":{"Pro Git Ch. 1.3":{"(http://git-scm.com/book/en/v2/Getting-Started-Git-Basics)\r\n* Preview Reading: ":{"Pro Git Ch. 2.1":{"(http://git-scm.com/book/en/v2/Git-Basics-Getting-a-Git-Repository)\r\n* Preview Reading: ":{"Pro Git Ch. 2.2":{"(http://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository)\r\n* Listening: ":{"How to ask for technical help":{"(https://www.youtube.com/watch?v":"hY14Er6JX2s)\r\n\r\n### Variables\r\n\r\n- [ ] Local Variable\r\n\r\n- [ ] Keywords\r\n\r\n- [ ] Constants\r\n\r\n### Ruby\r\n\r\n- [ ] Core Syntax\r\n\r\n- [ ] Methods\r\n\r\n- [ ] puts debugging `puts my_variable.inspect`\r\n\r\n- [ ] pry debugging `binding.pry`\r\n\r\n- [ ] Objects\r\n\r\n- [ ] Running a Ruby File\r\n\r\n- [ ] Your First Program `palindrome.rb`\r\n\r\n### Logic\r\n\r\n- [ ] If, Unless, While, Until\r\n\r\n- [ ] Ternary Operators (?:)\r\n\r\n- [ ] ||=\r\n\r\n- [ ]  =\r\n\r\n- [ ] -=\r\n\r\n- [ ] Truthy and Falsey Values\r\n\r\n"}}}}}}}}}}}}}}}}}}}},{"assignment":{"id":"688","title":"User Input Statistics","due_date":"","description":"\nCreate a program which will take repeated input from the user and generate statistics on those inputs.","body":"# ---\r\n#   name: \"input-statistics\",\r\n#   version: \"1.0.0\",\r\n#   title: \"User Input Statistics\",\r\n#   description: \"Create a program which will take repeated input from the user and generate statistics on those inputs.\",\r\n#   difficultyModes: \r\n#       \"Normal\",\r\n#       \"Hard\",\r\n#       \"Nightmare\"\r\n#   ,\r\n#   keywords:\r\n#     \"Control Flow\",\r\n#     \"Variables\",\r\n#     \"Data Types\",\r\n#     \"Arithmetic\",\r\n#     \"puts\",\r\n#     \"gets\",\r\n#     \"Gists\"\r\n# ---\r\n\r\n# User Input Statistics\r\n\r\n## Description\r\n\r\nCreate a program which will take repeated input from the user and generate statistics on those inputs.\r\n\r\n## Objectives\r\n\r\nAfter completing this assignment, you should...\r\n\r\n* Understand control flow, specifically looping and branching.\r\n* Understand variables and data types.\r\n* Understand basic ways in which a Ruby program can present information to the user and request information from the user.\r\n* Understand how ruby code resides on the file system.\r\n* Be able to use `puts` and `gets`.\r\n* Be able to perform calculations on variables.\r\n* Be able to run ruby code from the command line.\r\n\r\n## Deliverables\r\n\r\n* **Ruby code.** This code should be executable, should run without errors, and should accomplish the requirements given below.\r\n* **A link to a Gist.** Create a Ruby Gist on http://gist.github.com and paste your Ruby code into it.  Submit the link to this gist via the homework submission form found on the course website.\r\n\r\n## Normal Mode\r\n\r\nYour goal for tonight is to create a program to keep track of user input.  You will repeatedly ask the user to enter a number, and as long as the user types a number and hits enter, you will ask again.  If the user hits enter on a blank line (without typing a number first), this means that the user is finished.\r\n\r\nOnce the user is finished, you should present statistics about the inputs.  You should give:\r\n\r\n* The total of all the numbers.\r\n* The average of all the numbers.\r\n\r\nYour program should still work if the user inputs negative numbers and/or non-integer rational numbers (e.g. `3.45`).\r\n\r\nIf the user enters something that is not a number (e.g. `Potato`), your program should state that this was a mistake and ask again.  HINT: To determine if input is a number, you might consider converting the input (a `String`) to a number, then converting it back, then checking to see if it matches the original.\r\n\r\n## Hard Mode\r\n\r\nExtend your program to accept strings as well.  If the user starts off by entering a string (e.g. `correct`), then the program will accept strings for subsequent inputs.  Rather than showing statistics at the end, it will show the concatenated version of the inputs.  For example, if the inputs are the following:\r\n\r\n* `correct`\r\n* `horse`\r\n* `battery`\r\n* `staple`\r\n\r\nThen the output will be `correcthorsebatterystaple`.\r\n\r\nYour program should continue to work exactly like Normal Mode if the user starts by entering a number.  If the user mixes numbers and strings in the same run, your program should tell the user to start over, then stop execution.\r\n\r\n## Nightmare Mode\r\n\r\nWhen the user is inputting numbers, add the following statistics to the output:\r\n\r\n* Standard Deviation\r\n* Median\r\n\r\nWhen the user is inputting strings, add the following statistics to the output:\r\n\r\n* Average length of inputs\r\n* Number of times the letter `e` was used in the inputs."},"unit_id":"407"},{"lesson":{"id":"1356","title":"Methods and Arrays","description":"\nWe continue to build your base ruby knowledge, introducing Arrays, or lists of data, and methods, ways to organize your code. ","body":"* Human Learning:\r\n  * ON BOARD: Try before being taught\r\n* Looping a certain number of times.\r\n* Data Structures\r\n  * Ranges\r\n  * Arrays\r\n  * ` ` vs `<<`\r\n  * `.each`\r\n* More on Variables\r\n  * Proper Ruby variable naming\r\n  * Two names for the same variable\r\n  * How variables are stored in memory\r\n  * How memory is different from hard disk\r\n  * Binary\r\n  * How to store integers\r\n  * How to store strings\r\n  * `2.3 3.4` - Floating Point Errors\r\n  * Decimal (later)\r\n* `rand`\r\n* Methods\r\n  * Return values vs side effects (including `puts`)\r\n  * Scope\r\n  * Parameters\r\n  * Default parameters\r\n  * Defining the same method twice\r\n* Common Error Messages\r\n  * NameError (`undefined local variable`)\r\n  * NoMethodError (`nil.reverse`)\r\n  * ArgumentError\r\n  * TypeError (`2 \"1\"`)\r\n* Git (ON BOARD) - WITH FRONT END\r\n  * Reason: keep different versions over time\r\n  * Reason: backups\r\n  * `git init`\r\n  * `git add`\r\n  * `git commit`\r\n  * New repository on GitHub\r\n  * `git push`\r\n  * `git diff`\r\n  * `git log`\r\n* Editors (and pros and cons of the default vim)\r\n\r\n#### Useful Links\r\n\r\n* [Not entering your GitHub password into git for every push](https://help.github.com/articles/caching-your-github-password-in-git/)\r\n* Extra method exercise: [Five Monkeys](https://github.com/masonfmatthews/rails_assignments/tree/master/unused/exercises/monkeys_jumping_on_the_bed)\r\n* Extra method exercise: [Random Number in a Range (Fish Story)](https://github.com/masonfmatthews/rails_assignments/tree/master/unused/exercises/random_in_range)\r\n\r\n#### Evening Reading\r\n\r\n* Preview Reading: [Hashes in Ruby](https://rubymonk.com/learning/books/1-ruby-primer/chapters/10-hashes-in-ruby/lessons/46-introduction-to-ruby-hashes)\r\n* Listening: [Ruby Rogues - How to Learn](https://devchat.tv/ruby-rogues/131-rr-how-to-learn)\r\n"},"unit_id":"407"},{"assignment":{"id":"771","title":"Challenge: 12 Days of Christmas","due_date":"","description":"\nCreate a program to print out the lyrics to \"The 12 Days of Christmas.\"","body":"## Instructions\r\n\r\nYou sing for a 1780s cover band, but sadly, you always forget the lyrics to \"The 12 Days of Christmas\".  Given your love for the 1780s, you decide that you need software to solve this problem.\r\n\r\nWrite a program to print out the lyrics to \"The 12 Days of Christmas.\"  It should include at least two methods:\r\n\r\n* `verse(number)` - If this method is passed a 2, it will `puts` a line about turtle doves AND a line about partridge in a pear tree.\r\n* `entire_song()` - When this method is called, the output will include all 12 verses.  This means that the user will see the line about the pear tree 12 total times.\r\n\r\nAs always, you have [the Wikipedia page](http://en.wikipedia.org/wiki/The_Twelve_Days_of_Christmas_%28song%29) to help you (as the developer) with the lyrics.\r\n"},"unit_id":"407"},{"assignment":{"id":"717","title":"Number Guessing Game","due_date":"","description":"\nCreate a number guessing game in which the computer picks a number and you have to guess it. The computer will give you cues like 'Too High' or 'Too Low.'","body":"## Objectives\r\n\r\nAfter completing this assignment, you should...\r\n\r\n* Understand what methods are and how they can be used to:\r\n  * Reduce code repetition\r\n  * Improve readers' ability to reason about code\r\n* Understand how ruby code resides on the file system and how it is executed\r\n* Be able to use puts and gets\r\n* Be able to add, commit, and push to github\r\n* Create, add to, and check for presence in an array\r\n\r\n## Deliverables\r\n\r\n* **A GitHub repository.**\r\n* **A Ruby file called `guessing_game.rb`.**\r\n* **A series of commits on that repository.** After you get each requirement working, run `git add .`, then `git commit -m \"TEXT HERE\"`, where TEXT HERE should be replaced with the description of the requirement you just finished.\r\n\r\nAfter your work is complete, make sure to `git push` your changes up to GitHub.  Feel free to do this more than once along the way, of course.\r\n\r\nUse the homework submission form on the course website to turn in a link to your GitHub repository.\r\n\r\n## Normal Mode\r\n\r\nYour goal for tonight is to create a number guessing game. Your program should pick a random number between 1 and 100 and ask you for a guess. If your guess is less than the program's number, it should tell you that you were low and let you guess again. If the guess is greater than the program's number, it should tell you that you were high and let you guess again. If your guess is correct, the program should tell you that you win and then quit.\r\n\r\nOther requirements:\r\n\r\n* After 5 incorrect guesses, the program should tell you that you lose.\r\n* If you guess the same number twice, the program should ask you if you're feeling all right (or something similarly sarcastic).\r\n* Your code should include at least two methods.\r\n* This game should be run from the command line by typing \"ruby guessing_game.rb\".\r\n\r\n## Hard Mode\r\n\r\nHard Mode has two parts to it:\r\n\r\n1. In normal mode, you will probably use the \"rand\" method. In hard mode, find another way!\r\n2. The program should also comment on your behavior if you make a guess that doesn't help you.  For example, you might say \"50\" and then be told \"that's too low.\"  If you then guess \"25,\" you're just wasting a guess.\r\n\r\n## Nightmare Mode\r\n\r\nWrite the opposite program as well: you, the user, pick a number between 1 and 100. The computer has to guess the number. You tell it whether it's too high, too low, or correct after each guess. The computer gets five guesses. The computer should tell you if you are lying to it.  (e.g. Computer guesses 50, you say \"High.\"  Computer then guesses 49 and you say \"Low.\"  You'd be lying, as there are no numbers between them.)\r\n\r\n## Additional Resources\r\n\r\nIf you do Nightmare Mode, you might want to:\r\n\r\n* [Watch this video](https://www.youtube.com/watch?v=JQhciTuD3E8) about binary search\r\n* [Read this article](http://en.wikipedia.org/wiki/Binary_search_algorithm) about binary search"},"unit_id":"407"},{"lesson":{"id":"1357","title":"Hashes and Nested Data structures","description":"\nWe continue to build your core Ruby language knowledge, learning about Hashes, and complex data structures.  And some great odds and ends","body":"* Random Topics\r\n  * Methods which return versus methods which have side effects.\r\n  * `?` methods\r\n  * `!` methods\r\n  * `if` commands on one line\r\n  * `return`... is optional.\r\n  * Parentheses when calling or defining methods... are optional.\r\n  * Customizing your `PS1`\r\n  * Flycut for copy history\r\n  * Vertical select via Atom's Sublime-Style-Column-Selection package\r\n  * Ruby Rogues as a way to stay up to date.  Listenings starting tonight.\r\n* `nil` and default values for parameters\r\n* Control Flow (in light of Number Guessing Game)\r\n  * next (not lose a turn if you guess the same thing twice)\r\n  * break (stop asking when the correct number is guessed)\r\n  * return\r\n  * exit\r\n* POD Attempt 1: Array\r\n  * Just names first.  Ask for everyone's name and display them all at the end.\r\n  * How do I prevent duplicates when I enter a name more than once?\r\n* Attempt 2: Set\r\n  * Basic `require` from standard library\r\n  * Core library vs. Standard library\r\n* Attempt 3: Hash\r\n  * Keep track of a phone number for each person\r\n* Attempt 4: Hashes inside a Hash\r\n  * Keep track of a phone number and an email address and a birthdate for each person\r\n* Attempt 5: Arrays inside Hashes\r\n  * Keep track of multiple email addresses for each person.\r\n* Git/GitHub Conventions\r\n  * Good commit messages\r\n  * [XKCD on commit messages](http://xkcd.com/1296/)\r\n\r\n#### Useful Links\r\n\r\n* Extra array-to-hash exercise: [Super-simple Search](https://github.com/masonfmatthews/rails_assignments/tree/master/unused/exercises/super_simple_search)\r\n* Extra hash exercise: [Sorta-simple Search](https://github.com/masonfmatthews/rails_assignments/tree/master/unused/exercises/sorta_simple_search)\r\n* [Markdown Reference](https://help.github.com/articles/markdown-basics/)\r\n* [PS1 Variables Reference](http://www.cyberciti.biz/tips/howto-linux-unix-bash-shell-setup-prompt.html)\r\n\r\n#### Evening Reading\r\n\r\n* Preview Reading: [Writing Classes in Ruby](http://rubylearning.com/satishtalim/writing_our_own_class_in_ruby.html)\r\n* Listening: [Ruby Rogues - Impostor Syndrome](https://devchat.tv/ruby-rogues/107-rr-impostor-syndrome-with-tim-chevalier)\r\n* Listening: [Developers and Depression](https://vimeo.com/78419167)\r\n\r\n"},"unit_id":"407"},{"assignment":{"id":"749","title":"Challenge: Phone Numbers","due_date":"","description":"\nCreate a program to store names with corresponding phone numbers, then give back the correct phone number when the user enters a name.\r\n","body":"## Instructions\r\n\r\nYour teacher can't remember your phone number.  (Honestly, though, does anyone remember phone numbers anymore?)  In order to help him/her, you need to write a program.  This program will have two stages of execution.\r\n\r\nIn the first stage, the program will ask for a student name, then ask for that student's phone number.  Then it will ask for a name again, then ask for that second student's phone number.  This will continue until the user enters a blank name.\r\n\r\nOnce a blank name has been entered, the program will move into the second stage.  In this stage, the program will ask who the user wants to look up.  The user will enter a student's name, and the program will give back that student's phone number.  This request/response cycle will continue until the user enters a blank name, and then the program will end."},"unit_id":"407"},{"assignment":{"id":"718","title":"Blackjack Advisor","due_date":"","description":"\nCreate a program which will take information about a current blackjack hand and return the optimal action for the player to take.","body":"## Objectives\r\n\r\nAfter completing this assignment, you should...\r\n\r\n* Understand complex data structures and how they can store multi-dimensional data.\r\n* Be able to create and use hashes.\r\n* Be able to create and use nested data structures.\r\n* Be able to write READMEs in Markdown.\r\n\r\n## Deliverables\r\n\r\n* **A GitHub repository.**\r\n* **A Ruby file called `blackjack_advisor.rb`.**\r\n* **A README.**  This document must contain a description of your program, what it is for, and how to use it.  It must be called `README.md` and be written in Markdown.\r\n* **A series of commits on that repository.**  Not just one at the end!\r\n\r\nAfter your work is complete, make sure to `git push` your changes up to GitHub.  Feel free to do this more than once along the way, of course.\r\n\r\nUse the homework submission form on the course website to turn in a link to your GitHub repository.\r\n\r\n## Normal Mode\r\n\r\nAlthough Blackjack is a game of chance, it is simple enough that the mathematically optimal next move can be given for any hand.  Don't worry, though"},"unit_id":"407"," I won't be asking you to calculate them.  Your goal for this assignment is to store the set of optimal moves for a 1 deck blackjack hand, ask the user for his or her current hand (and the dealer's up card), then give the user his or her optimal move.\r\n\r\nThe set of optimal moves can be found ":{"here":{"(http://wizardofodds.com/games/blackjack/strategy/calculator/). For normal mode, use the default settings that occur on this page when you load it (1 deck, etc).\r\n\r\nJust to be clear, you do NOT have to understand the full rules of Blackjack to complete this assignment.  Normal mode is only asking for advice on your FIRST decision, so please don't worry about what happens after you choose \"Hit.\"  Here's one more hint: in this limited scenario, your hand is soft if you have a single Ace and hard if you do not (a pair is a pair regardless of whether they are Aces).\r\n\r\nYour program must use hashes or arrays within a hash (at least) to solve this problem.  \r\n\r\nThe prompts to the user should go something like this:\r\n\r\n* `Please enter your first card:`\r\n* (user enters 9)\r\n* `Please enter your second card:`\r\n* (user enters 9)\r\n* `Please enter the dealer's card:`\r\n* (user enters 7)\r\n* `Your optimal move is to stand.`\r\n\r\nYou can either allow the user to enter `J`, `Q`, or `K` for Jack, Queen, or King, respectively, or you can expect the user to enter a `10` for any of these.  However, the user should have to enter `A` for an Ace.\r\n\r\n\r\n## Hard Mode\r\n\r\nIn addition to the three inputs given above, allow the user to also specify whether the game is being played with 1 deck, 2 decks, or 4 or more decks.\r\n\r\n\r\n## Nightmare Mode\r\n\r\nModify your hard mode game to allow the program to continue running in the case of a hit.  If it suggests that you hit, it should then ask you what card you received on your hit.  It should then continue to offer you additional advice until the hand is over (i.e. until it tells you do something other than hit).":null}}},{"lesson":{"id":"1365","title":"Basic OOP and Classes","description":"\nThe world we interact with is filled with objects, does Door.open? or does Car.start!","body":"* Check-in on Readings\r\n* Note on methods: why didn't we call `random_number` every time through the loop in number_guessing?\r\n* Nuances of `if` and `||`\r\n  * What is \"truthy\" and what is \"falsey\" in Ruby?\r\n  * What does `if` or `while` actually expect?\r\n  * What does an `||` call return? (`true || false`, `\"Mason\" || false`, etc)\r\n* Object Oriented Programming\r\n  * In-Class Example: [Cell Phone Assignments](https://github.com/masonfmatthews/rails_assignments/tree/master/exercises/cell_phone_assignments)\r\n  * What are objects?\r\n    * State and behavior\r\n    * State = instance variables\r\n    * Behavior = methods\r\n  * Everything in Ruby is messages being passed to objects!!!\r\n    * Example of how we've been using strings.\r\n  * What are classes?\r\n    * Blueprints for objects\r\n  * Encapsulation\r\n* Math is messages being passed to objects as well!!!\r\n  * `2   2.3`\r\n  * `2. (2.3)`\r\n  * Overriding arithmetic operations (e.g. `def  (other) ... end`)\r\n* Ruby code in multiple files\r\n  * `require` redux\r\n* Symbols\r\n<!-- NOT ATTR_READER -->\r\n\r\nMini-lecture:\r\n\r\n* Markdown\r\n* Quality READMEs\r\n* Agile Development\r\n  * ON BOARD: Start small (this is a skill)\r\n  * ON BOARD: Debugging is everywhere (this is a skill)\r\n* How to Debug:\r\n  * First: Squint hard\r\n  * Second: Read the error messages\r\n  * Third: Test your assumptions\r\n    * `puts` statements\r\n    * `byebug`\r\n  * Fourth: Break the problem into smaller problems and solve them individually\r\n  * Fifth: Google\r\n    * Two types of resources: tutorials and answers.\r\n    * Stackoverflow is great for answers.\r\n    * Blogs (and Rails Guides) are great for tutorials.\r\n    * Be as specific as you can about which technologies you're using.  `ActiveRecord::Base` is a better start to your search than `Rails`\r\n    * You can try questions (e.g. `How do I use ActiveRecord?`)\r\n    * Limit to last year\r\n    * Use Google to dig deeper into someone else's docs (e.g. `weather underground api sunrise`)\r\n    * [XKCD on Old Forums](https://xkcd.com/979/)\r\n* Gems\r\n  * `gem list`\r\n  * `gem install`\r\n  * `byebug`\r\n\r\n#### Evening Reading\r\n\r\n* Current Reading: [A good blog post about creating your own error classes](http://www.skorks.com/2009/09/ruby-exceptions-and-exception-handling/)\r\n* Preview Reading: [Ruby Inheritance](http://rubylearning.com/satishtalim/ruby_inheritance.html)\r\n* Listening: [Ruby Rogues - Debugging Mindset](https://devchat.tv/ruby-rogues/150-rr-the-debugging-mindset-with-danielle-sucher)\r\n"},"unit_id":"407"},{"assignment":{"id":"779","title":"Challenge: Albums and Artists","due_date":"","description":"\nCreate a program to store, change, and communicate information about albums and their artists.","body":"## Instructions\r\n\r\nYou are a manager who runs a music store.  Unfortunately, cassette tapes are being sold SO QUICKLY that you can't keep track of your inventory, nor can you remember what's on sale at any given time.\r\n\r\nBuild a structure to keep track of your albums (with their names, number in stock, normal price, and sale price), artists (with their names), and which artist created which albums.  You should be able to:\r\n\r\n* Create a new album (once you know its name, number in stock, and normal price).\r\n* Sell a copy of an album.\r\n* Increase the number of copies of an album you have in stock.\r\n* Get a count of how many copies of a particular album you have in stock.\r\n* Create a new artist (once you know his/her name).\r\n* Assign an album to an artist's catalog.\r\n* Put a discount percentage on an album.\r\n* Put a discount percentage on an artist's entire catalog.\r\n* Get the current price of an album."},"unit_id":"407"},{"assignment":{"id":"719","title":"Currency Converter","due_date":"","description":"\nCreate two Ruby classes: one for storing currencies and another for converting currencies.","body":"## Objectives\r\n\r\nAfter completing this assignment, you should...\r\n\r\n* Understand how to override mathematical operators\r\n* Understand how objects can return objects of other classes as responses to messages\r\n* Understand how to execute Ruby code which spans multiple files\r\n* Understand how to create your own exception classes\r\n* Be able to initialize an object from a set of parameters\r\n* Be able to initialize a set of objects from a complex data structure\r\n* Be able to raise exceptions/errors as appropriate\r\n* Be able to parse strings to isolate specific symbols\r\n\r\n## Deliverables\r\n\r\n* **A GitHub repository.**\r\n* **A Currency class in its own file.**\r\n* **A CurrencyConverter class in its own file.**\r\n* **A quality README.**\r\n* **A series of commits on that repository.**  Not just one at the end!\r\n\r\nAfter your work is complete, make sure to `git push` your changes up to GitHub.  Feel free to do this more than once along the way, of course.\r\n\r\nUse the homework submission form on the course website to turn in a link to your GitHub repository.\r\n\r\n## Normal Mode\r\n\r\nIn this weekend assignment, you will be asked to create your first Ruby classes.  One of those classes will represent an amount of currency (a real-world thing you can point to), and the second will represent a currency converter (arguably a real-world person, but actually a set of procedures).\r\n\r\nIn order to complete this assignment, your classes (and objects instantiated from them) must satisfy all of the requirements below.  You may tackle these in any order, but every time you finish a requirement, commit your code with a message describing the requirement.  This means that you should have a lot of commits.\r\n\r\nCurrency objects:\r\n\r\n* Should be created with an amount and a currency code\r\n* Should equal another Currency object with the same amount and currency code\r\n* Should NOT equal another Currency object with different amount or currency code\r\n* Should be able to be added to another Currency object with the same currency code\r\n* Should be able to be subtracted by another Currency object with the same currency code\r\n* Should raise a DifferentCurrencyCodeError when you try to add or subtract two Currency objects with different currency codes.\r\n* Should be able to be multiplied by a Fixnum or Float and return a Currency object\r\n* Currency.new should be able to take one argument with a currency symbol embedded in it, like \"$1.20\" or \"€ 7.00\", and figure out the correct currency code. It can also take two arguments like before, one being the amount and the other being the currency code.\r\n\r\nCurrencyConverter objects:\r\n\r\n* Should be initialized with a Hash of currency codes to conversion rates (see link to rates below)\r\n* At first, just make this work with two currency codes and conversation rates, with one rate being 1.0 and the other being the conversation rate. An example would be this: `{USD: 1.0, EUR: 0.74}`, which implies that a dollar is worth 0.74 euros.\r\n* Should be able to take a Currency object and a requested currency code that is the same currency code as the Currency object's and return a Currency object equal to the one passed in.  That is, `currency_converter.convert(Currency.new(1, :USD), :USD) == Currency.new(1, :USD)`\r\n* Should be able to take a Currency object that has one currency code it knows and a requested currency code and return a new Currency object with the right amount in the new currency code\r\n* Should be able to be created with a Hash of three or more currency codes and conversion rates. An example would be this: `{USD: 1.0, EUR: 0.74, JPY: 120.0}`, which implies that a dollar is worth 0.74 euros and that a dollar is worth 120 yen, but also that a euro is worth `120/0.74 = 162.2` yen.\r\n* Should be able to convert Currency in any currency code it knows about to Currency in any other currency code it knows about.\r\n* Should raise an `UnknownCurrencyCodeError` when you try to convert from or to a currency code it doesn't know about.\r\n\r\n## Hard Mode\r\n\r\nBuild a third class called CurrencyTrader.  CurrencyTrader should be initialized with two CurrencyConverter objects from two different points in time, plus a starting Currency.  CurrencyTrader should have a method which returns the best currency investment over that span of time.\r\n\r\nFor instance, if you are starting with $1,000,000, assume that you can convert your dollars to one currency at the first point in time, but that you must then convert it back to dollars at the second point in time.  The best bet given two CurrencyConverters may be GBP.  If USD -> GBP is 1 to 1 at the first point in time, then 1 to 0.5 at the second point in time, you can double your money.\r\n\r\nYou should not need to modify Currency or CurrencyConverter to get this to work, but if you see a path that involves modifying them and want to give it a shot, feel free.\r\n\r\n## Nightmare Mode\r\n\r\nYou guessed it.  Modify your CurrencyTrader to accept an array of CurrencyConverter objects and a starting Currency.  If the length of the array is greater than 2, you can move your currency more than once, so long as it ends in the same currency code as it started.  Find the best set of currency trades for your money over time.\r\n\r\n## Additional Resources\r\n\r\n* A good site to get [real conversion rates](http://www.xe.com/currencyconverter/#rates)\r\n* A list of [active currency codes](https://en.wikipedia.org/wiki/ISO_4217#Active_codes)"},"unit_id":"407"},{"unit":{"id":"410","title":"OOP and Testing","description":"\nOOP and Testing"}},{"assignment":{"id":"748","title":"Challenge: OddArray with TDD","due_date":"","description":"\nCreate one (very odd) class that contains an Array but only allows odd items to be stored in it.","body":"## Instructions\r\n\r\nYou are a (very odd) mathematician who has set out to prove that any mathematical operation can be performed using only odd numbers (e.g. 1, 3, 5, 333) and no even numbers (e.g. 2, 4, 6, 448).  You'll be writing a lot of code along the way, but before you get started on the mathy stuff, you want to make sure that you have a class which will help you with the basics.  You need a class like an array which will only store odd numbers in it.  Do NOT use inheritance"},"unit_id":"410"," use composition instead.\r\n\r\nBehavior should include:\r\n\r\n* You can initialize an OddArray by passing it an array.\r\n* You can add an element to OddArray using the shovel operator.\r\n* You can call `.to_a` on an OddArray to return an Array which only has the odd numbers that were initialized/added to it.\r\n* You can add two OddArrays together and get back an OddArray which contains the odd numbers from both of the original OddArrays.\r\n\r\nWrite this class using TDD.  TDD has four steps:\r\n\r\n* Write a test which tests one (isolated) new behavior\r\n* Make sure your new test fails\r\n* Write code to make your test pass\r\n* Refactor while keeping all tests passing":null},{"lesson":{"id":"1366","title":"Inheritance and Testing","description":"\nCow, and Chicken are both Animals are they not?  and How can we be sure not to break things?","body":"Cow, and Chicken are both Animals are they not?  and How can we be sure not to break things?\r\n\r\n* Human Learning\r\n  * ON BOARD: Study concept over implementation\r\n* Random Items\r\n  * SHORTCUT: `attr_reader`\r\n  * SHORTCUT: `attr_accessor`\r\n  * SHORTCUT: ternary operator\r\n  * Two hardest problems in computer science\r\n* Inheritance\r\n  * Exploration: Start with Float object.  Explore superclasses and classes.\r\n  * Begin in-class work on Vehicle exercise.\r\n* Exceptions\r\n  * Review how the exception problem was solved over the weekend.\r\n  * Explore inheritance tree for exceptions\r\n  * Example code: divide by zero in a method\r\n  * Raising exceptions yourself\r\n  * Inventing exception classes\r\n* Testing\r\n  * Show tests for the Vehicle class. Use code already built.\r\n  * Build out \"12 Days of Christmas\" for [its test suite](https://github.com/masonfmatthews/rails_assignments/tree/master/exercises/twelve_days_of_christmas).\r\n  * Sliming\r\n* Git\r\n  * Reason: Sharing code with others\r\n  * Forking\r\n  * `git clone`\r\n\r\n#### Useful Links\r\n\r\n* Extra inheritance exercise: [National Expressions](https://github.com/masonfmatthews/rails_assignments/tree/master/unused/exercises/national_expressions)\r\n\r\n#### Evening Reading\r\n\r\n* Current Reading: [Pro Git Ch. 2.5](http://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes)\r\n* Preview Reading: [Composition "},"unit_id":"410"," Inheritance":{"(http://www.sitepoint.com/composition-inheritance/)\r\n* Listening: ":{"Ruby Rogues - Diversity":{"(https://devchat.tv/ruby-rogues/101-rr-diversity-with-ashe-dryden)":null}}}},{"assignment":{"id":"809","title":"Challenge: Vehicles","due_date":"","description":"\nCreate and/or modify classes to store information about various types of vehicles.","body":"## Instructions\r\n\r\nYou are building a transportation application, and its primary purpose is to calculate travel times over certain distances.  You are working on an existing class called `Vehicle`.  It is stored in `vehicle.rb` in this folder.\r\n\r\nYou may infer from looking at the file that the vehicle in question is a Car.  Your task is to extend this code so that it can also return valid information about the following types of vehicles:\r\n\r\n* Electric cars, which have 1 gear.\r\n* Hybrid cars, which have 2 engines.\r\n* Motorcycles, which have 2 wheels.\r\n* Planes, which have 6 wheels, 2 engines, 1 gear, and 2 wings.\r\n* Bicycles, which have no engines, 2 wheels and a number of gears specified when the bicycle is initialized.\r\n\r\n## Related Files\r\n\r\n[vehicle.rb](https://tiy-learn-content.s3.amazonaws.com/09020545-vehicle.rb) (244 Bytes)  \r\n[vehicle_test.rb](https://tiy-learn-content.s3.amazonaws.com/1ad9291e-vehicle_test.rb) (2 KB) "},"unit_id":"410"},{"lesson":{"id":"1388","title":"Modules and Composition","description":"\nBuilding complex objects can be messy, we introduce new concepts to organize related code. ","body":"\r\n* Human Learning\r\n  * ON BOARD: Use short feedback loops\r\n* Agile Principles\r\n  * ON BOARD: Iterate often\r\n  * ON BOARD: Gather and incorporate feedback\r\n  * DIAGRAM: Finding a path to a moving point\r\n* Agile Rituals\r\n  * ON BOARD: Retrospectives\r\n  * ON BOARD: Sprints/Iterations\r\n  * ON BOARD: Daily Standups\r\n* Classes\r\n  * Object tree redux\r\n  * Class methods\r\n* Random topics\r\n  * `''` vs `\"\"`\r\n  * You can return objects when true/false is expected (e.g. `ship.fire_at(x, y)`)\r\n  * Class variables - [DON'T](http://blog.honeybadger.io/lexical-scoping-and-ruby-class-variables/)\r\n  * Code Smells\r\n  * DateTimes\r\n  * Dates\r\n    * [XKCD on Dates](https://xkcd.com/1179/)\r\n* OO: `public` vs `private`\r\n  * Example: Daisy is a Builder.  She has many steps she takes to build a house.\r\n  * We don't want to micromanage her and tell her HOW to build the house"},"unit_id":"410"," we just want to tell her to build it and let her figure out the details.\r\n  * Tell, don't ask\r\n* Inheritance - is-a\r\n\r\n**Problem of the Day 1:** ":{"Vehicle Modules":{"(https://github.com/rposborne/rails_assignments/tree/master/exercises/vehicle_modules)\r\n\r\n* Modules - acts-like-a/has-a-role\r\n  * Also, use of modules for namespacing\r\n  * Example: IronYard module with Instructor and Student classes.  Iron Yard students don't sleep, but a Student outside the module does.\r\n  * Example: Bass.\r\n    * Make two classes with the same name.  One for the fish and one for the instrument.\r\n    * Each should have a `maximum_length` method, but they should return different things\r\n    * You should also be able to call `Fish::PHYLUM` and get back `\"Chordata\"`\r\n\r\n**Problem of the Day 2:** ":{"Vehicle Composition":{"(https://github.com/rposborne/rails_assignments/tree/master/exercises/vehicle_composition)\r\n\r\n* Composition - has-a\r\n  * Sometimes you don't want the class itself yo know how to do everything that is asked of it.  Instead, you want the class to be able to ask its components to answer questions for it.\r\n* Git\r\n  * `.gitignore` files\r\n  * GitHub collaborators\r\n  * `git pull`\r\n\r\n#### Useful Links\r\n\r\n* ":{"Code Smells":{"(http://us3.campaign-archive2.com/?u":"1090565ccff48ac602d0a84b4"}}}}}},"id":"f7e471a9db","e":"0f523bd725)\r\n\r\n#### Evening Reading\r\n\r\n* Preview Reading: [Regex One](http://regexone.com/)\r\n* Listening: [Ruby Rogues - When to Use Modules](https://devchat.tv/ruby-rogues/022-rr-when-to-use-modules)\r\n"},{"lesson":{"id":"1389","title":"Blocks and TDD","description":"\nBlocks, Procs, Lambdas, what are they, what do they do, and how we test them.","body":"\r\n* Random topics\r\n  * Keyword arguments\r\n* Blocks/Procs/Lambdas/Methods\r\n  * Methods as objects\r\n    * `m = method(:my_method)`\r\n    * `m.call`\r\n  * Blocks\r\n    * Code snippets that we pass to things like `.each` or `.map`\r\n    * Passed in to a method using `{}` or `do ... end`\r\n    * `yield` to a block inside a method\r\n  * Procs\r\n    * Crystalized blocks\r\n    * `p = Proc.new {...block_stuff...}`\r\n    * Passed in to a method using `method("},"unit_id":"410","p)`\r\n    * Called from within the method with `parameter.call`\r\n  * Lambdas\r\n    * Procs with their own scope on the call stack\r\n    * `return` is limited to returning from just the lambda, not the method calling the lambda.\r\n* TDD\r\n  * Five steps:\r\n    * Write a test which tests one (isolated) new behavior\r\n    * Make sure your new test fails\r\n    * Write code to make your test pass\r\n    * Refactor while keeping all tests passing\r\n    * Commit\r\n  * Run through example TDD with ye olde ":{"Albums and Artists":{"(https://github.com/rposborne/rails_assignments/tree/master/exercises/albums_and_artists).\r\n  * `assert_in_delta`\r\n  * Expect tests to run randomly (third class method ":{"here":{"(http://ruby-doc.org/stdlib-1.9.3/libdoc/minitest/unit/rdoc/MiniTest/Unit/TestCase.html))\r\n  * (":{"Second contender for the best method ever":{"(https://github.com/mperham/sidekiq/blob/master/lib/sidekiq.rb#L40))\r\n\r\n#### Useful Links\r\n\r\n#### Evening Reading\r\n\r\n* Preview Reading: ":{"Relational Databases":{"(https://quickleft.com/blog/introduction-to-database-design-on-rails/)\r\n":null}}}}}}}}},{"assignment":{"id":"814","title":"Employee Reviews","due_date":"","description":"\nCreate classes to track employees and their departments, interpret employee reviews, and give out raises to those with good reviews.","body":"## Objectives\r\n\r\nAfter completing this assignment, you should...\r\n\r\n* Understand blocks in Ruby\r\n* Understand simple classification problems\r\n* Reflect on how natural language can be read by a computer to convert it to quantitative data\r\n* Be able to write code using test-driven development\r\n* Be able to use regular expressions\r\n* Be able to use keyword arguments\r\n* Be able to write a method which calls a block\r\n\r\n## Deliverables\r\n\r\n* **An estimate.** After you read through this assignment (but before you start coding), write down a number of hours that you expect each part to take (1-3).  Record your hours as you go.\r\n* **A GitHub repository.**\r\n* **An Employee class in its own file.**\r\n* **A Department class in its own file.**\r\n* **A quality README.**\r\n* **A test suite.** Not only must this test suite be conceptually complete, it must be written before the code that satisfies it.\r\n* **A reflection on your estimate.**  Well?  How did you do?\r\n\r\nUse the homework submission form on the course website to turn in a link to your GitHub repository.\r\n\r\n## Normal Mode\r\n\r\n#### Part 1\r\n\r\nYou want to keep track of employees (with their names, email addresses, phone numbers, and salaries), departments (with their names), and which employees are in which department.  You should be able to:\r\n\r\n* Create a new department (given its name).\r\n* Create a new employee (given his/her name, email address, phone number, and salary).\r\n* Add an employee to a department.\r\n* Get an employee's name.\r\n* Get an employee's salary.\r\n* Get a department's name.\r\n* Get a total salary for all employees in a department.\r\n* Add some employee review text (a paragraph or two) to an employee.\r\n* Mark whether an employee is performing satisfactorily or not satisfactorily.\r\n* Give a raise to an individual.  You decide if this makes sense in dollars or in percent.\r\n* Give raises to a department's employees.  You must pass this method a total dollar amount, and it must distribute the raise amounts reasonably to the department's employees.  Only employees who are performing satisfactorily should get raises.\r\n\r\nCommit your code after you complete each requirement (or more often).\r\n\r\nAt this stage, your code should:\r\n\r\n* Use keyword arguments at least once.\r\n\r\nFinally, all of this code must be written using test-driven development.  Your test suite should have at least one complete example (also known as a \"pathological\" example) of how the two classes can be used in the real world.\r\n\r\n#### Part 2\r\n\r\nOnce your baseline app is complete, modify your method on Departments which gives out raises.  It should now take a block which will specify which employees are eligible for raises.  Prior to this stage, you only allowed \"satisfactory\" employees to get raises, but now it can be more flexible.\r\n\r\nFor instance, if a department had $5,000 to spread out to its employees in raises, but you wanted to only give raises to people who only made less than $100,000, you could call a `give_raises` method like this:\r\n\r\n    department.give_raises(5000) do |employee|\r\n      employee.salary < 100000\r\n    end\r\n\r\nAt this stage, your code should:\r\n\r\n* Have a method which takes a block and calls `yield`.\r\n\r\n#### Part 3\r\n\r\nAs part of this repository, you have a file called `sample_reviews.txt`.  This file includes two negative employee reviews and two positive employee reviews.  Your task is to write a method on the employee class which looks the employee review text stored in an employee instance variable (in Part 1) and return a `true` or `false` for whether this employee is performing satisfactorily.  This also means that you will be removing the ability for users to manually mark whether an employee is performing satisfactorily.  This will now be determined by code.\r\n\r\nRegular expressions will be your friend here (and are required for this assignment, even if you could do it without them).  Even so, this is not an easy problem.  It is in a category of problems called \"Natural Language Processing,\" and since you are attempting to take reviews and place them in one of two buckets (satisfactory or not), it is known as a \"Classification\" problem.\r\n\r\nAt this stage, your code should also:\r\n\r\n* Use at least one non-trivial regular expression (i.e. Don't just look for a literal string like `/good/`).\r\n\r\n## Hard Mode\r\n\r\nAs mentioned above, placing reviews into two buckets is a \"Classification\" problem.  Your task in Nightmare Mode is to solve a \"Regression\" problem instead.  Assign each employee a SCORE based on his/her review rather than a yes/no value.  After creating this method, modify your departmental raise function to take this score value into account when giving out raises.\r\n\r\nFinally, go out on the Internet and search for at least three examples of good review texts and three examples of bad review texts.  Pass them into your algorithm and see if you agree with its assessment.\r\n\r\n## Nightmare Mode\r\n\r\nUp until this point in the class, you have assumed that when your program ends, all objects created by your code are lost.  For instance, if you make a new employee with a name of \"Janice\", no record of Janice will exist for the next execution of the code to find.\r\n\r\nModify your code so that if employees and departments are made once, they will be available for all subsequent runs of your application.\r\n\r\n## Required Files\r\n\r\n [sample_reviews.txt](https://tiy-learn-content.s3.amazonaws.com/b93c5d2d-sample_reviews.txt) (3 KB) \r\n\r\n## Additional Resources\r\n\r\n* My favorite tutorial for learning Regular Expressions is [RegexOne](http://regexone.com/)\r\n* The best way to fiddle with Regex is [Rubular](http://rubular.com/)"},"unit_id":"410"},{"unit":{"id":"411","title":"Databases and Data Modeling","description":"\nDatabases and Data Modeling"}},{"lesson":{"id":"1415","title":"Database Design","description":"\nPersistent data! and How we visual and mentally organize our data stores.\r\n","body":"\r\n* Human Learning\r\n  * ON BOARD: Refresh when memory is stale\r\n  * ON BOARD: Retrieve rather than review\r\n* Files as permanent storage\r\n  * `File.open`\r\n  * `CSV.open`\r\n* Databases\r\n  * Data Structure Design (based on POD)\r\n  * Entity-Relationship Diagrams (ERDs)\r\n  * Lucidchart\r\n  * Primary and Foreign Keys\r\n  * Join Tables\r\n* Gemfiles\r\n  * Bundler\r\n  * `bundle install`\r\n  * Semantic versioning (e.g. 4.1.5)\r\n  * How Semantic versioning fits in with `public`/`private`\r\n* Migrations\r\n  * Data types\r\n\r\n#### Useful Links\r\n\r\n* Extra Database Exercise: [Albums and Artists in a Database](https://github.com/rposborne/rails_assignments/blob/master/unused/exercises/albums_and_artists_in_db)\r\n\r\n#### Evening Reading\r\n\r\n* Preview Reading: [Codecademy SQL](https://www.codecademy.com/courses/learn-sql)\r\n* Listening: [Ruby Rogues - Coding Exercises, Quizzes, and Katas](https://devchat.tv/ruby-rogues/054-rr-coding-exercises-quizzes-and-katas)\r\n"},"unit_id":"411"},{"assignment":{"id":"828","title":"Challenge: Fizz Buzz","due_date":"","description":"\nSolve the famous FizzBuzz example using a TDD workflow","body":"```ruby\r\nrequire 'minitest/autorun'\r\nrequire 'minitest/pride'\r\n\r\n# Write a method which returns:\r\n#\r\n#   * \"Fizz\" if the number is divisible by 3\r\n#   * \"Buzz\" if the number is divisible by 5\r\n#   * \"FizzBuzz\" if the number is divisible by 3 and 5\r\n#   * Otherwise, return the number itself\r\n#\r\n# Remember that the % operator (modulo) is your friend.  It returns a zero if one\r\n# number is divisible by another number.  In other words, 4 % 2 == 0.\r\n\r\n# WRITE YOUR CODE HERE.  Name your method `fizzbuzz`.\r\n\r\nclass IfChallenge < MiniTest::Test\r\n  def test_one\r\n    assert_equal 1, fizzbuzz(1)\r\n  end\r\n\r\n  def test_three\r\n    assert_equal \"Fizz\", fizzbuzz(3)\r\n  end\r\n\r\n  def test_five\r\n    assert_equal \"Buzz\", fizzbuzz(5)\r\n  end\r\n\r\n  def test_eight\r\n    assert_equal 8, fizzbuzz(8)\r\n  end\r\n\r\n  def test_ten\r\n    assert_equal \"Buzz\", fizzbuzz(10)\r\n  end\r\n\r\n  def test_fifteen\r\n    assert_equal \"FizzBuzz\", fizzbuzz(15)\r\n  end\r\n\r\n  def test_twenty_three\r\n    assert_equal 23, fizzbuzz(23)\r\n  end\r\n\r\n  def test_thirty\r\n    assert_equal \"FizzBuzz\", fizzbuzz(30)\r\n  end\r\nend\r\n```\r\n"},"unit_id":"411"},{"assignment":{"id":"830","title":"Time Entry Data Structure","due_date":"","description":"\nCreate a data structure diagram for a web app that stores developer time entries.","body":"## Objectives\r\n\r\nAfter completing this assignment, you should be able to effectively...\r\n\r\n* Create a visual database diagram\r\n* Reason about complex data sources\r\n* Write Gemfiles to include multiple gems\r\n* Write migrations to set up live databases\r\n\r\n## Deliverables\r\n\r\n* **An ERD Diagram.** Create a database diagram in Lucidchart (or a similar tool).\r\n* **A GitHub Repository.**\r\n* **A Gemfile.**\r\n* **Migration Files.** One migration file for each database table in your diagram.\r\n\r\nSubmit your homework via the class assignments Google Form.\r\n\r\n## Normal Mode\r\n\r\nIf you happen to go to work for an agency/consultancy after finishing your studies, you'll find that the company has an important job: billing the customer appropriately for the number of hours worked.  Some agencies circumvent this by only assigning developers to projects for entire weeks, but others allow developers to work on multiple projects within a week (or even within a day).  This makes billing more complicated.\r\n\r\nYour assignment is to design a data structure (visually, in a tool like Lucidchart) to store information about your company's development team, your company's projects, and hours worked across those projects.  Your data structure must capture the following:\r\n\r\n* Developers have names, email addresses, and start dates with the company.\r\n* Clients have names and are assigned to an industry.\r\n* Projects have names and start dates, and are assigned to a client.\r\n* A developer can be assigned to many projects.\r\n* Conversely, a project can have many developers assigned to it.\r\n* Developers can create time entries, which state:\r\n  * Who did the work\r\n  * Which project the time entry is for\r\n  * Which day the developer worked\r\n  * How long the developer worked\r\n* A developer can be placed in groups.  For instance, two groups might be \"Front End\" and \"Back End.\"\r\n* Conversely, a group can have many developers placed into it.\r\n* Developers can leave comments on a project.\r\n* Developers can leave comments on a client.\r\n* Developers can leave comments on an industry.\r\n\r\nOnce you have completed a diagram which meets these requirements, create a GitHub repository and write one migration for each table in your diagram.\r\n\r\n## Hard Mode\r\n\r\nAdd the following requirement to your data structure:\r\n\r\n* Projects can have many tasks.  These tasks can be structured hierarchically.  For instance, the \"Iron Yard Website Redesign\" project could have two tasks within it: \"Build marketing pages\" and \"Build administrative pages.\"  \"Build administrative pages\" could have tasks inside of it, like \"Admins can edit list of campuses,\" \"Admins can edit list of teachers,\" and so on.  This can go on for an arbitrary number of levels.\r\n* Time entries will no longer be made for the project as a whole, but for the specific task the time was put against.\r\n\r\nUpdate your data diagram and migrations to reflect these changes.\r\n\r\n## Nightmare Mode\r\n\r\nAdd the following requirement to your data structure:\r\n\r\nUsers should be able to add any data that they want to clients.  For instance, I might decide that I want to track number of employees for each of my clients.  Then, tomorrow, I might decide that I want to track date founded for each of my clients.  Then, the day after, I might decide that I want to track country of origin for each of my clients.\r\n\r\nYou should build a data structure now which will allow these changes to be made in the future WITHOUT changing the data structure later.  Update your data diagram and your migrations to reflect these changes."},"unit_id":"411"}]